2025-03-11 14:03:39 [ERROR]: Invalid email or password {
  "code": 401
}
2025-03-11 14:03:39 [ERROR]: Invalid email or password {
  "path": "/api/auth/login",
  "method": "POST",
  "body": {
    "email": "ngodat.it213@gmail.com",
    "password": "Code26102003"
  },
  "error": {
    "code": 401,
    "success": false
  }
}
2025-03-11 14:04:08 [ERROR]: Invalid email or password {
  "code": 401
}
2025-03-11 14:04:08 [ERROR]: Invalid email or password {
  "path": "/api/auth/login",
  "method": "POST",
  "body": {
    "email": "ngodat.it213@gmail.com",
    "password": "Code26102003#!@"
  },
  "error": {
    "code": 401,
    "success": false
  }
}
2025-03-11 14:04:29 [ERROR]: Invalid email or password {
  "code": 401
}
2025-03-11 14:04:29 [ERROR]: Invalid email or password {
  "path": "/api/auth/login",
  "method": "POST",
  "body": {
    "email": "ngodat.it213@gmail.com",
    "password": "Code26102003#!@"
  },
  "error": {
    "code": 401,
    "success": false
  }
}
2025-03-11 14:39:25 [ERROR]: Invalid token {
  "path": "/api/users/profile",
  "method": "GET",
  "body": {},
  "error": {
    "code": 401,
    "success": false
  }
}
2025-03-11 14:50:03 [ERROR]: Invalid email or password {
  "code": 401
}
2025-03-11 14:50:03 [ERROR]: Invalid email or password {
  "path": "/api/auth/login",
  "method": "POST",
  "body": {
    "email": "ngodat.it213@gmail.com",
    "password": "Code26102003"
  },
  "error": {
    "code": 401,
    "success": false
  }
}
2025-03-11 16:42:29 [ERROR]: Invalid token {
  "path": "/api/users/profile",
  "method": "GET",
  "body": {},
  "error": {
    "code": 401,
    "success": false
  }
}
2025-03-11 17:51:44 [ERROR]: Dữ liệu không hợp lệ {
  "path": "/api/users/profile",
  "method": "PUT",
  "body": {
    "first_name": "Hydra",
    "last_name": "Coder",
    "working_at": "AWS",
    "address": "District 9, Ho Chi Minh City, Viet Nam",
    "about": "Tempor est officia sunt dolore et proident ullamco est voluptate laboris laborum laborum sit. Ullamco minim dolor cillum cillum eiusmod minim amet tempor anim. Dolore pariatur ipsum ad ullamco consectetur quis dolore. Excepteur ullamco deserunt occaecat quis enim aliqua excepteur reprehenderit irure ad ullamco. Magna laboris in tempor do cillum nisi. Laboris duis veniam labore veniam."
  },
  "error": {
    "code": 400,
    "success": false,
    "error": {
      "undefined": "value must have at least 1 key"
    }
  }
}
2025-03-11 17:52:13 [ERROR]: Dữ liệu không hợp lệ {
  "path": "/api/users/profile",
  "method": "PUT",
  "body": {
    "first_name": "Hydra",
    "last_name": "Coder",
    "working_at": "AWS",
    "address": "District 9, Ho Chi Minh City, Viet Nam",
    "about": "Tempor est officia sunt dolore et proident ullamco est voluptate laboris laborum laborum sit. Ullamco minim dolor cillum cillum eiusmod minim amet tempor anim. Dolore pariatur ipsum ad ullamco consectetur quis dolore. Excepteur ullamco deserunt occaecat quis enim aliqua excepteur reprehenderit irure ad ullamco. Magna laboris in tempor do cillum nisi. Laboris duis veniam labore veniam."
  },
  "error": {
    "code": 400,
    "success": false,
    "error": {
      "undefined": "value must have at least 1 key"
    }
  }
}
2025-03-11 17:53:35 [ERROR]: Dữ liệu không hợp lệ {
  "path": "/api/users/profile",
  "method": "PUT",
  "body": {
    "first_name": "Hydra",
    "last_name": "Coder",
    "working_at": "AWS",
    "address": "District 9, Ho Chi Minh City, Viet Nam",
    "about": "Tempor est officia sunt dolore et proident ullamco est voluptate laboris laborum laborum sit. Ullamco minim dolor cillum cillum eiusmod minim amet tempor anim. Dolore pariatur ipsum ad ullamco consectetur quis dolore. Excepteur ullamco deserunt occaecat quis enim aliqua excepteur reprehenderit irure ad ullamco. Magna laboris in tempor do cillum nisi. Laboris duis veniam labore veniam."
  },
  "error": {
    "code": 400,
    "success": false,
    "error": {
      "undefined": "value must have at least 1 key"
    }
  }
}
2025-03-11 17:54:18 [ERROR]: Dữ liệu không hợp lệ {
  "path": "/api/users/profile",
  "method": "PUT",
  "body": {
    "first_name": "Hydra"
  },
  "error": {
    "code": 400,
    "success": false,
    "error": {
      "undefined": "value must have at least 1 key"
    }
  }
}
2025-03-11 17:54:32 [ERROR]: Dữ liệu không hợp lệ {
  "path": "/api/users/profile",
  "method": "PUT",
  "body": {
    "first_name": "Hydra",
    "last_name": "Coder",
    "working_at": "AWS",
    "address": "District 9, Ho Chi Minh City, Viet Nam",
    "about": "Tempor est officia sunt dolore et proident ullamco est voluptate laboris laborum laborum sit. "
  },
  "error": {
    "code": 400,
    "success": false,
    "error": {
      "undefined": "value must have at least 1 key"
    }
  }
}
2025-03-11 17:55:06 [ERROR]: Dữ liệu không hợp lệ {
  "path": "/api/users/profile",
  "method": "PUT",
  "body": {
    "first_name": "Hydra",
    "last_name": "Coder",
    "working_at": "AWS",
    "address": "District 9, Ho Chi Minh City, Viet Nam",
    "about": "Tempor est officia sunt dolore et proident ullamco est voluptate laboris laborum laborum sit. Ullamco minim dolor cillum cillum eiusmod minim amet tempor anim. Dolore pariatur ipsum ad ullamco consectetur quis dolore. Excepteur ullamco deserunt occaecat quis enim aliqua excepteur reprehenderit irure ad ullamco. Magna laboris in tempor do cillum nisi. Laboris duis veniam labore veniam."
  },
  "error": {
    "code": 400,
    "success": false,
    "error": {
      "undefined": "value must have at least 1 key"
    }
  }
}
2025-03-11 17:55:14 [ERROR]: Dữ liệu không hợp lệ {
  "path": "/api/users/profile",
  "method": "PUT",
  "body": {
    "first_name": "Hydra",
    "last_name": "Coder",
    "working_at": "AWS",
    "address": "District 9, Ho Chi Minh City, Viet Nam",
    "about": "Tempor est officia sunt dolore et proident ullamco est voluptate laboris laborum laborum sit. Ullamco minim dolor cillum cillum eiusmod minim amet tempor anim. Dolore pariatur ipsum ad ullamco consectetur quis dolore. Excepteur ullamco deserunt occaecat quis enim aliqua excepteur reprehenderit irure ad ullamco. Magna laboris in tempor do cillum nisi. Laboris duis veniam labore veniam."
  },
  "error": {
    "code": 400,
    "success": false,
    "error": {
      "undefined": "value must have at least 1 key"
    }
  }
}
2025-03-11 17:55:54 [ERROR]: User not found {
  "code": 404
}
2025-03-11 17:55:54 [ERROR]: User not found {
  "path": "/api/users/profile",
  "method": "PUT",
  "body": {
    "first_name": "Hydra",
    "last_name": "Coder",
    "working_at": "AWS",
    "address": "District 9, Ho Chi Minh City, Viet Nam",
    "about": "Tempor est officia sunt dolore et proident ullamco est voluptate laboris laborum laborum sit. Ullamco minim dolor cillum cillum eiusmod minim amet tempor anim. Dolore pariatur ipsum ad ullamco consectetur quis dolore. Excepteur ullamco deserunt occaecat quis enim aliqua excepteur reprehenderit irure ad ullamco. Magna laboris in tempor do cillum nisi. Laboris duis veniam labore veniam."
  },
  "error": {
    "code": 404,
    "success": false
  }
}
2025-03-11 18:35:03 [ERROR]: Invalid token {
  "path": "/api/users/teachers",
  "method": "GET",
  "body": {},
  "error": {
    "code": 401,
    "success": false
  }
}
2025-03-11 18:36:01 [ERROR]: user.teacherNotFound {
  "code": 404
}
2025-03-11 18:36:01 [ERROR]: user.teacherNotFound {
  "path": "/api/users/teachers/67c05fa139552b1e8f2d900d",
  "method": "GET",
  "body": {},
  "error": {
    "code": 404,
    "success": false
  }
}
2025-03-11 19:47:08 [ERROR]: sanitizedUser is not defined {}
2025-03-11 19:47:08 [ERROR]: sanitizedUser is not defined {
  "path": "/api/users/profile",
  "method": "GET",
  "body": {},
  "error": {}
}
2025-03-11 20:55:48 [ERROR]: Invalid token {
  "path": "/api/users/teachers/67c05fa139552b1e8f2d900d",
  "method": "GET",
  "body": {},
  "error": {
    "code": 401,
    "success": false
  }
}
2025-03-11 21:52:33 [ERROR]: Dữ liệu không hợp lệ {
  "path": "/api/auth/register",
  "method": "POST",
  "body": {
    "first_name": "John",
    "last_name": "Doe",
    "email": "john.doe@gmail.com",
    "password": "123456"
  },
  "error": {
    "code": 400,
    "success": false,
    "error": {
      "password": "Mật khẩu phải chứa ít nhất 1 chữ hoa, 1 chữ thường và 1 số"
    }
  }
}
2025-03-11 21:52:40 [ERROR]: Dữ liệu không hợp lệ {
  "path": "/api/auth/register",
  "method": "POST",
  "body": {
    "first_name": "John",
    "last_name": "Doe",
    "email": "john.doe@gmail.com",
    "password": "123456789"
  },
  "error": {
    "code": 400,
    "success": false,
    "error": {
      "password": "Mật khẩu phải chứa ít nhất 1 chữ hoa, 1 chữ thường và 1 số"
    }
  }
}
2025-03-12 21:12:12 [ERROR]: User not found {
  "code": 400
}
2025-03-12 21:12:12 [ERROR]: User not found {
  "path": "/api/auth/verify-otp",
  "method": "POST",
  "body": {
    "email": "user@example.com",
    "otp": "810969"
  },
  "error": {
    "code": 400,
    "success": false,
    "error": null
  }
}
2025-03-12 21:35:18 [ERROR]: otp.invalid {
  "code": 400
}
2025-03-12 21:35:18 [ERROR]: otp.invalid {
  "path": "/api/auth/verify-otp",
  "method": "POST",
  "body": {
    "email": "gangaldat.it.213@gmail.com",
    "otp": "296325"
  },
  "error": {
    "code": 400,
    "success": false,
    "error": null
  }
}
2025-03-12 21:35:54 [ERROR]: Invalid email or password {
  "code": 401
}
2025-03-12 21:35:54 [ERROR]: Invalid email or password {
  "path": "/api/auth/login",
  "method": "POST",
  "body": {
    "email": "gangaldat.it.213@gmail.com",
    "password": "123456789#!@"
  },
  "error": {
    "code": 401,
    "success": false
  }
}
2025-03-12 21:36:02 [ERROR]: Class constructor ObjectId cannot be invoked without 'new' {}
2025-03-12 21:36:02 [ERROR]: Class constructor ObjectId cannot be invoked without 'new' {
  "path": "/api/users/profile",
  "method": "GET",
  "body": {},
  "error": {}
}
2025-03-12 21:36:03 [ERROR]: Invalid token {
  "path": "/api/users/teachers",
  "method": "GET",
  "body": {},
  "error": {
    "code": 401,
    "success": false
  }
}
2025-03-12 21:36:03 [ERROR]: Invalid token {
  "path": "/api/users/teachers",
  "method": "GET",
  "body": {},
  "error": {
    "code": 401,
    "success": false
  }
}
2025-03-12 21:36:36 [ERROR]: Class constructor ObjectId cannot be invoked without 'new' {}
2025-03-12 21:36:36 [ERROR]: Class constructor ObjectId cannot be invoked without 'new' {
  "path": "/api/users/profile",
  "method": "GET",
  "body": {},
  "error": {}
}
2025-03-12 21:36:36 [ERROR]: Invalid token {
  "path": "/api/users/teachers",
  "method": "GET",
  "body": {},
  "error": {
    "code": 401,
    "success": false
  }
}
2025-03-12 21:36:36 [ERROR]: Invalid token {
  "path": "/api/users/teachers",
  "method": "GET",
  "body": {},
  "error": {
    "code": 401,
    "success": false
  }
}
2025-03-12 21:37:22 [ERROR]: Class constructor ObjectId cannot be invoked without 'new' {}
2025-03-12 21:37:22 [ERROR]: Class constructor ObjectId cannot be invoked without 'new' {
  "path": "/api/users/profile",
  "method": "GET",
  "body": {},
  "error": {}
}
2025-03-12 21:51:10 [ERROR]: Cart validation failed: user_id: Path `user_id` is required. {}
2025-03-12 21:51:10 [ERROR]: Cart validation failed: user_id: Path `user_id` is required. {
  "path": "/api/cart",
  "method": "GET",
  "body": {},
  "error": {
    "errors": {
      "user_id": {
        "name": "ValidatorError",
        "message": "Path `user_id` is required.",
        "properties": {
          "message": "Path `user_id` is required.",
          "type": "required",
          "path": "user_id"
        },
        "kind": "required",
        "path": "user_id"
      }
    },
    "_message": "Cart validation failed",
    "name": "ValidationError",
    "message": "Cart validation failed: user_id: Path `user_id` is required."
  }
}
2025-03-12 21:55:20 [ERROR]: Cast to ObjectId failed for value "string" (type string) at path "_id" for model "Course" {}
2025-03-12 21:55:20 [ERROR]: Cast to ObjectId failed for value "string" (type string) at path "_id" for model "Course" {
  "path": "/api/cart/add",
  "method": "POST",
  "body": {
    "course_id": "string"
  },
  "error": {
    "stringValue": "\"string\"",
    "valueType": "string",
    "kind": "ObjectId",
    "value": "string",
    "path": "_id",
    "reason": {},
    "name": "CastError",
    "message": "Cast to ObjectId failed for value \"string\" (type string) at path \"_id\" for model \"Course\""
  }
}
2025-03-12 21:55:41 [ERROR]: cart.notFound {
  "code": 404
}
2025-03-12 21:55:41 [ERROR]: cart.notFound {
  "path": "/api/cart/remove",
  "method": "POST",
  "body": {
    "course_id": "string"
  },
  "error": {
    "code": 404,
    "success": false
  }
}
2025-03-12 21:55:52 [ERROR]: cart.notFound {
  "code": 404
}
2025-03-12 21:55:52 [ERROR]: cart.notFound {
  "path": "/api/cart/clear",
  "method": "POST",
  "body": {},
  "error": {
    "code": 404,
    "success": false
  }
}
2025-03-12 22:03:08 [ERROR]: Cart validation failed: user_id: Path `user_id` is required. {}
2025-03-12 22:03:08 [ERROR]: Cart validation failed: user_id: Path `user_id` is required. {
  "path": "/api/cart/add",
  "method": "POST",
  "body": {
    "course_id": "67c060782aaa9b16b68bc874"
  },
  "error": {
    "errors": {
      "user_id": {
        "name": "ValidatorError",
        "message": "Path `user_id` is required.",
        "properties": {
          "message": "Path `user_id` is required.",
          "type": "required",
          "path": "user_id"
        },
        "kind": "required",
        "path": "user_id"
      }
    },
    "_message": "Cart validation failed",
    "name": "ValidationError",
    "message": "Cart validation failed: user_id: Path `user_id` is required."
  }
}
2025-03-12 22:03:47 [ERROR]: cart.cannotAddOwnCourse {
  "code": 400
}
2025-03-12 22:03:47 [ERROR]: cart.cannotAddOwnCourse {
  "path": "/api/cart/add",
  "method": "POST",
  "body": {
    "course_id": "67c060782aaa9b16b68bc874"
  },
  "error": {
    "code": 400,
    "success": false,
    "error": null
  }
}
2025-03-13 13:17:34 [ERROR]: cart.courseNotInCart {
  "code": 404
}
2025-03-13 13:17:34 [ERROR]: cart.courseNotInCart {
  "path": "/api/cart/remove",
  "method": "POST",
  "body": {
    "course_id": "67d27862d133254c78b099fa"
  },
  "error": {
    "code": 404,
    "success": false
  }
}
2025-03-13 13:44:31 [ERROR]: Error creating MoMo payment: Order validation failed: courses.0: Cast to [ObjectId] failed for value "[\n' +
  '  { course_id: new ObjectId("67c060782aaa9b16b68bc874"), price: 1111 },\n' +
  '  { course_id: new ObjectId("67c18e8fef4cea5480728c07"), price: 1111 }\n' +
  ']" (type string) at path "courses.0" because of "CastError" {
  "errors": {
    "courses.0": {
      "stringValue": "\"[\\n' +\n  '  { course_id: new ObjectId(\"67c060782aaa9b16b68bc874\"), price: 1111 },\\n' +\n  '  { course_id: new ObjectId(\"67c18e8fef4cea5480728c07\"), price: 1111 }\\n' +\n  ']\"",
      "valueType": "string",
      "kind": "[ObjectId]",
      "value": "[\n  { course_id: new ObjectId(\"67c060782aaa9b16b68bc874\"), price: 1111 },\n  { course_id: new ObjectId(\"67c18e8fef4cea5480728c07\"), price: 1111 }\n]",
      "path": "courses.0",
      "reason": {
        "stringValue": "\"{ course_id: new ObjectId(\"67c060782aaa9b16b68bc874\"), price: 1111 }\"",
        "valueType": "Object",
        "kind": "ObjectId",
        "value": {
          "course_id": "67c060782aaa9b16b68bc874",
          "price": 1111
        },
        "path": "courses",
        "reason": {},
        "name": "CastError",
        "message": "Cast to ObjectId failed for value \"{ course_id: new ObjectId(\"67c060782aaa9b16b68bc874\"), price: 1111 }\" (type Object) at path \"courses\" because of \"BSONError\""
      },
      "name": "CastError",
      "message": "Cast to [ObjectId] failed for value \"[\\n' +\n  '  { course_id: new ObjectId(\"67c060782aaa9b16b68bc874\"), price: 1111 },\\n' +\n  '  { course_id: new ObjectId(\"67c18e8fef4cea5480728c07\"), price: 1111 }\\n' +\n  ']\" (type string) at path \"courses.0\" because of \"CastError\""
    }
  },
  "_message": "Order validation failed",
  "stack": "ValidationError: Order validation failed: courses.0: Cast to [ObjectId] failed for value \"[\\n' +\n  '  { course_id: new ObjectId(\"67c060782aaa9b16b68bc874\"), price: 1111 },\\n' +\n  '  { course_id: new ObjectId(\"67c18e8fef4cea5480728c07\"), price: 1111 }\\n' +\n  ']\" (type string) at path \"courses.0\" because of \"CastError\"\n    at Document.invalidate (/Users/datngovantien/Projects/backend/nodejs/e-course-nodejs/node_modules/mongoose/lib/document.js:3219:32)\n    at model.$set (/Users/datngovantien/Projects/backend/nodejs/e-course-nodejs/node_modules/mongoose/lib/document.js:1464:12)\n    at model.$set (/Users/datngovantien/Projects/backend/nodejs/e-course-nodejs/node_modules/mongoose/lib/document.js:1119:16)\n    at model.Document (/Users/datngovantien/Projects/backend/nodejs/e-course-nodejs/node_modules/mongoose/lib/document.js:165:12)\n    at model.Model (/Users/datngovantien/Projects/backend/nodejs/e-course-nodejs/node_modules/mongoose/lib/model.js:123:12)\n    at new model (/Users/datngovantien/Projects/backend/nodejs/e-course-nodejs/node_modules/mongoose/lib/model.js:4758:15)\n    at /Users/datngovantien/Projects/backend/nodejs/e-course-nodejs/node_modules/mongoose/lib/model.js:2922:18\n    at Array.map (<anonymous>)\n    at Function.create (/Users/datngovantien/Projects/backend/nodejs/e-course-nodejs/node_modules/mongoose/lib/model.js:2911:30)\n    at MoMoService.createPaymentUrl (/Users/datngovantien/Projects/backend/nodejs/e-course-nodejs/src/services/momo.service.js:92:19)"
}
2025-03-13 13:44:31 [ERROR]: Order validation failed: courses.0: Cast to [ObjectId] failed for value "[\n' +
  '  { course_id: new ObjectId("67c060782aaa9b16b68bc874"), price: 1111 },\n' +
  '  { course_id: new ObjectId("67c18e8fef4cea5480728c07"), price: 1111 }\n' +
  ']" (type string) at path "courses.0" because of "CastError" {}
2025-03-13 13:44:31 [ERROR]: Order validation failed: courses.0: Cast to [ObjectId] failed for value "[\n' +
  '  { course_id: new ObjectId("67c060782aaa9b16b68bc874"), price: 1111 },\n' +
  '  { course_id: new ObjectId("67c18e8fef4cea5480728c07"), price: 1111 }\n' +
  ']" (type string) at path "courses.0" because of "CastError" {
  "path": "/api/cart/checkout",
  "method": "POST",
  "body": {
    "payment_method": "momo"
  },
  "error": {
    "errors": {
      "courses.0": {
        "stringValue": "\"[\\n' +\n  '  { course_id: new ObjectId(\"67c060782aaa9b16b68bc874\"), price: 1111 },\\n' +\n  '  { course_id: new ObjectId(\"67c18e8fef4cea5480728c07\"), price: 1111 }\\n' +\n  ']\"",
        "valueType": "string",
        "kind": "[ObjectId]",
        "value": "[\n  { course_id: new ObjectId(\"67c060782aaa9b16b68bc874\"), price: 1111 },\n  { course_id: new ObjectId(\"67c18e8fef4cea5480728c07\"), price: 1111 }\n]",
        "path": "courses.0",
        "reason": {
          "stringValue": "\"{ course_id: new ObjectId(\"67c060782aaa9b16b68bc874\"), price: 1111 }\"",
          "valueType": "Object",
          "kind": "ObjectId",
          "value": {
            "course_id": "67c060782aaa9b16b68bc874",
            "price": 1111
          },
          "path": "courses",
          "reason": {},
          "name": "CastError",
          "message": "Cast to ObjectId failed for value \"{ course_id: new ObjectId(\"67c060782aaa9b16b68bc874\"), price: 1111 }\" (type Object) at path \"courses\" because of \"BSONError\""
        },
        "name": "CastError",
        "message": "Cast to [ObjectId] failed for value \"[\\n' +\n  '  { course_id: new ObjectId(\"67c060782aaa9b16b68bc874\"), price: 1111 },\\n' +\n  '  { course_id: new ObjectId(\"67c18e8fef4cea5480728c07\"), price: 1111 }\\n' +\n  ']\" (type string) at path \"courses.0\" because of \"CastError\""
      }
    },
    "_message": "Order validation failed",
    "name": "ValidationError",
    "message": "Order validation failed: courses.0: Cast to [ObjectId] failed for value \"[\\n' +\n  '  { course_id: new ObjectId(\"67c060782aaa9b16b68bc874\"), price: 1111 },\\n' +\n  '  { course_id: new ObjectId(\"67c18e8fef4cea5480728c07\"), price: 1111 }\\n' +\n  ']\" (type string) at path \"courses.0\" because of \"CastError\""
  }
}
